generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActiveStorageAttachment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar
  recordType String   @map("record_type") @db.VarChar
  recordId   String   @map("record_id") @db.Uuid
  blobId     String   @map("blob_id") @db.Uuid
  createdAt  DateTime @map("created_at") @db.Timestamp(6)

  @@unique([recordType, recordId, name, blobId], map: "index_active_storage_attachments_uniqueness")
  @@index([blobId], map: "index_active_storage_attachments_on_blob_id")
  @@map("active_storage_attachments")
}

model ActiveStorageBlob {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String   @unique(map: "index_active_storage_blobs_on_key") @db.VarChar
  filename    String   @db.VarChar
  contentType String?  @map("content_type") @db.VarChar
  metadata    String?
  byteSize    BigInt   @map("byte_size")
  checksum    String   @db.VarChar
  createdAt   DateTime @map("created_at") @db.Timestamp(6)

  @@map("active_storage_blobs")
}

model Annotation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trackId   String   @map("track_id") @db.Uuid
  desc      String?
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_31a9a82e68")

  @@map("annotations")
}

model ArInternalMetadata {
  key       String   @id @db.VarChar
  value     String?  @db.VarChar
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)

  @@map("ar_internal_metadata")
}

model Attendance {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  showId    String   @map("show_id") @db.Uuid
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  show      Show     @relation(fields: [showId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_2aac17a78c")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_77ad02f5c5")

  @@unique([userId, showId], map: "index_attendances_on_user_id_and_show_id")
  @@index([showId], map: "index_attendances_on_show_id")
  @@index([userId], map: "index_attendances_on_user_id")
  @@map("attendances")
}

model Audit {
  id             BigInt    @id @default(autoincrement())
  auditableId    Int?      @map("auditable_id")
  auditableType  String?   @map("auditable_type") @db.VarChar
  associatedId   Int?      @map("associated_id")
  associatedType String?   @map("associated_type") @db.VarChar
  userId         String?   @map("user_id") @db.Uuid
  userType       String?   @map("user_type") @db.VarChar
  username       String?   @db.VarChar
  action         String?   @db.VarChar
  auditedChanges Json?     @map("audited_changes")
  version        Int?      @default(0) @map("version")
  comment        String?   @db.VarChar
  remoteAddress  String?   @map("remote_address") @db.VarChar
  requestUuid    String?   @map("request_uuid") @db.VarChar
  createdAt      DateTime? @map("created_at") @db.Timestamp(6)

  @@index([associatedType, associatedId], map: "associated_index")
  @@index([auditableType, auditableId, version], map: "auditable_index")
  @@index([createdAt], map: "index_audits_on_created_at")
  @@index([requestUuid], map: "index_audits_on_request_uuid")
  @@index([userId, userType], map: "user_index")
  @@map("audits")
}

model Author {
  name      String?  @db.VarChar
  slug      String   @db.VarChar
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  songs     Song[]

  @@index([slug], map: "index_authors_on_slug")
  @@map("authors")
}

model Band {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?  @db.VarChar
  slug      String   @unique(map: "index_bands_on_slug") @db.VarChar
  legacyId  Int?     @map("legacy_id")
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  shows     Show[]

  @@map("bands")
}

model BlogPost {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  blurb       String?
  slug        String
  content     String?
  state       String    @default("draft") @db.VarChar
  publishedAt DateTime? @map("published_at") @db.Timestamp(6)
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @map("updated_at") @db.Timestamp(6)
  postType    String    @default("blog") @map("post_type") @db.VarChar
  user        User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_829fc99162")

  @@index([publishedAt])
  @@index([state])
  @@index([title])
  @@index([userId], map: "index_blog_posts_on_user_id")
  @@map("blog_posts")
}

model Comment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  commentableId   String   @map("commentable_id") @db.Uuid
  commentableType String   @map("commentable_type") @db.VarChar
  content         String
  status          String   @default("published") @map("status") @db.VarChar
  userId          String   @map("user_id") @db.Uuid
  createdAt       DateTime @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @map("updated_at") @db.Timestamp(6)
  user            User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_03de2dc08c")

  @@index([commentableType, commentableId], map: "index_comments_on_commentable_type_and_commentable_id")
  @@index([userId], map: "index_comments_on_user_id")
  @@map("comments")
}

model Faq {
  id       Int     @id
  question String?
  answer   String?
  section  Int?

  @@map("faq")
}

model Favorite {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  showId     String   @map("show_id") @db.Uuid
  created_at DateTime @map("created_at") @db.Timestamp(6)
  updated_at DateTime @map("updated_at") @db.Timestamp(6)
  show       Show     @relation(fields: [showId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_664ddb4807")
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_d15744e438")

  @@index([showId], map: "index_favorites_on_show_id")
  @@index([userId], map: "index_favorites_on_user_id")
  @@map("favorites")
}

model FriendlyIdSlug {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug          String    @db.VarChar
  sluggableType String    @map("sluggable_type") @db.VarChar
  sluggableId   String    @map("sluggable_id") @db.Uuid
  scope         String?   @db.VarChar
  createdAt     DateTime? @map("created_at") @db.Timestamp(6)

  @@unique([slug, sluggableType, scope], map: "index_friendly_id_slugs_on_slug_and_sluggable_type_and_scope")
  @@index([slug, sluggableType], map: "index_friendly_id_slugs_on_slug_and_sluggable_type")
  @@index([sluggableType, sluggableId], map: "index_friendly_id_slugs_on_sluggable_type_and_sluggable_id")
  @@map("friendly_id_slugs")
}

model Like {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  likeableId   String   @map("likeable_id") @db.Uuid
  likeableType String   @map("likeable_type") @db.VarChar
  userId       String   @map("user_id") @db.Uuid
  createdAt    DateTime @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @map("updated_at") @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_1e09b5dabf")

  @@unique([userId, likeableType, likeableId], map: "index_likes_on_user_id_and_likeable_type_and_likeable_id")
  @@index([likeableType, likeableId], map: "index_likes_on_likeable_type_and_likeable_id")
  @@index([userId], map: "index_likes_on_user_id")
  @@map("likes")
}

model MediaContent {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year        Int?
  url         String?   @db.VarChar
  mediaType   String    @map("media_type") @db.VarChar
  description String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
  date        DateTime? @db.Date

  @@map("media_contents")
}

model PgSearchDocument {
  id             BigInt   @id @default(autoincrement())
  content        String?
  searchableType String?  @map("searchable_type") @db.VarChar
  searchableId   String?  @map("searchable_id") @db.Uuid
  createdAt      DateTime @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime @map("updated_at") @db.Timestamp(6)

  @@index([searchableType, searchableId], map: "index_pg_search_documents_on_searchable_type_and_searchable_id")
  @@map("pg_search_documents")
}

model Rating {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value        Float    @default(0.0)
  userId       String   @map("user_id") @db.Uuid
  createdAt    DateTime @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @map("updated_at") @db.Timestamp(6)
  rateableType String?  @map("rateable_type") @db.VarChar
  rateableId   String?  @map("rateable_id") @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a7dfeb9f5f")

  @@index([rateableType, rateableId], map: "index_ratings_on_rateable_type_and_rateable_id")
  @@index([userId], map: "index_ratings_on_user_id")
  @@map("ratings")
}

model Review {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  status     String   @default("draft") @db.VarChar
  userId     String   @map("user_id") @db.Uuid
  createdAt  DateTime @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @map("updated_at") @db.Timestamp(6)
  likesCount Int      @default(0) @map("likes_count")
  showId     String?  @map("show_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_74a66bd6c5")

  @@index([likesCount], map: "index_reviews_on_likes_count")
  @@index([showId], map: "index_reviews_on_show_id")
  @@index([userId], map: "index_reviews_on_user_id")
  @@map("reviews")
}

model Role {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String?  @db.VarChar
  resourceId   String?  @map("resource_id") @db.Uuid
  resourceType String?  @map("resource_type") @db.VarChar
  createdAt    DateTime @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @map("updated_at") @db.Timestamp(6)

  @@index([name], map: "index_roles_on_name")
  @@index([name, resourceType, resourceId], map: "index_roles_on_name_and_resource_type_and_resource_id")
  @@map("roles")
}

model ShowPhoto {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label     String?  @db.VarChar
  source    String?  @db.VarChar
  userId    String   @map("user_id") @db.Uuid
  showId    String   @map("show_id") @db.Uuid
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  show      Show     @relation(fields: [showId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_191cbe34d9")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5aafeab212")

  @@index([showId], map: "index_show_photos_on_show_id")
  @@index([userId], map: "index_show_photos_on_user_id")
  @@map("show_photos")
}

model ShowYoutube {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  showId    String   @map("show_id") @db.Uuid
  videoId   String   @map("video_id") @db.VarChar
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  show      Show     @relation(fields: [showId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ea4d9ca50c")

  @@index([showId], map: "index_show_youtubes_on_show_id")
  @@map("show_youtubes")
}

model Show {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug              String?       @unique(map: "index_shows_on_slug") @db.VarChar
  date              DateTime      @db.Date
  venueId           String?       @map("venue_id") @db.Uuid
  bandId            String?       @map("band_id") @db.Uuid
  notes             String?
  legacyId          Int?          @map("legacy_id")
  createdAt         DateTime      @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime      @map("updated_at") @db.Timestamp(6)
  likesCount        Int           @default(0) @map("likes_count")
  relistenUrl       String?       @map("relisten_url") @db.VarChar
  averageRating     Float?        @default(0.0) @map("average_rating")
  showPhotosCount   Int           @default(0) @map("show_photos_count")
  showYoutubesCount Int           @default(0) @map("show_youtubes_count")
  reviewsCount      Int           @default(0) @map("reviews_count")
  attendances       Attendance[]
  favorites         Favorite[]
  showPhotos        ShowPhoto[]
  showYoutubes      ShowYoutube[]
  band              Band?         @relation(fields: [bandId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_62c0e1304d")
  venue             Venue?        @relation(fields: [venueId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ae9094c3e4")
  tracks            Track[]

  @@index([likesCount], map: "index_shows_on_likes_count")
  @@map("shows")
}

model SideProject {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?   @db.VarChar
  dates     String?   @db.VarChar
  notes     String?
  mem1      String?   @db.VarChar
  mem2      String?   @db.VarChar
  mem3      String?   @db.VarChar
  mem4      String?   @db.VarChar
  mem5      String?   @db.VarChar
  mem6      String?   @db.VarChar
  mem7      String?   @db.VarChar
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  @@map("side_projects")
}

model Song {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String    @db.VarChar
  slug            String    @unique(map: "index_songs_on_slug") @db.VarChar
  createdAt       DateTime  @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime  @map("updated_at") @db.Timestamp(6)
  lyrics          String?
  tabs            String?
  notes           String?
  legacyAbbr      String?   @map("legacy_abbr") @db.VarChar
  legacyId        Int?      @map("legacy_id")
  cover           Boolean?  @default(false)
  authorId        String?   @map("author_id") @db.Uuid
  legacyAuthor    String?   @map("legacy_author")
  history         String?
  featuredLyric   String?   @map("featured_lyric")
  timesPlayed     Int       @default(0) @map("times_played")
  dateLastPlayed  DateTime? @map("date_last_played") @db.Date
  yearlyPlayData  Json      @default("{}") @map("yearly_play_data")
  longestGapsData Json      @default("{}") @map("longest_gaps_data")
  mostCommonYear  Int?      @map("most_common_year")
  leastCommonYear Int?      @map("least_common_year")
  guitarTabsUrl   String?   @map("guitar_tabs_url")
  author          Author?   @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_028deefde5")
  tracks          Track[]

  @@index([longestGapsData], map: "index_songs_on_longest_gaps_data", type: Gin)
  @@index([yearlyPlayData], map: "index_songs_on_yearly_play_data", type: Gin)
  @@map("songs")
}

model Tagging {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tagId        String?   @map("tag_id") @db.Uuid
  taggableType String?   @map("taggable_type") @db.VarChar
  taggableId   String?   @map("taggable_id") @db.Uuid
  taggerType   String?   @map("tagger_type") @db.VarChar
  taggerId     String?   @map("tagger_id") @db.Uuid
  context      String?   @db.VarChar
  createdAt    DateTime? @map("created_at") @db.Timestamp(6)
  tag          Tag?      @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_9fcd2e236b")

  @@unique([tagId, taggableId, taggableType, context, taggerId, taggerType], map: "taggings_idx")
  @@index([context], map: "index_taggings_on_context")
  @@index([tagId], map: "index_taggings_on_tag_id")
  @@index([taggableId], map: "index_taggings_on_taggable_id")
  @@index([taggableType], map: "index_taggings_on_taggable_type")
  @@index([taggableType, taggableId], map: "index_taggings_on_taggable_type_and_taggable_id")
  @@index([taggerId], map: "index_taggings_on_tagger_id")
  @@index([taggerId, taggerType], map: "index_taggings_on_tagger_id_and_tagger_type")
  @@index([taggerType, taggerId], map: "index_taggings_on_tagger_type_and_tagger_id")
  @@index([taggableId, taggableType, taggerId, context], map: "taggings_idy")
  @@index([taggableId, taggableType, context], map: "taggings_taggable_context_idx")
  @@map("taggings")
}

model Tag {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?   @unique(map: "index_tags_on_name") @db.VarChar
  createdAt     DateTime  @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime  @map("updated_at") @db.Timestamp(6)
  taggingsCount Int?      @default(0) @map("taggings_count")
  taggings      Tagging[]

  @@map("tags")
}

model Track {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  showId          String       @map("show_id") @db.Uuid
  songId          String       @map("song_id") @db.Uuid
  set             String       @db.VarChar
  position        Int
  segue           String?      @db.VarChar
  createdAt       DateTime     @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime     @map("updated_at") @db.Timestamp(6)
  likesCount      Int          @default(0) @map("likes_count")
  slug            String?      @unique(map: "index_tracks_on_slug") @db.VarChar
  note            String?      @db.VarChar
  allTimer        Boolean?     @default(false) @map("all_timer")
  previousTrackId String?      @map("previous_track_id") @db.Uuid
  nextTrackId     String?      @map("next_track_id") @db.Uuid
  averageRating   Float?       @default(0.0) @map("average_rating")
  annotations     Annotation[]
  show            Show         @relation(fields: [showId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_9d5431146f")
  song            Song         @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a41ea81c98")

  @@index([likesCount], map: "index_tracks_on_likes_count")
  @@index([nextTrackId], map: "index_tracks_on_next_track_id")
  @@index([previousTrackId], map: "index_tracks_on_previous_track_id")
  @@map("tracks")
}

model User {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName           String?      @map("first_name") @db.VarChar
  lastName            String?      @map("last_name") @db.VarChar
  createdAt           DateTime     @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @map("updated_at") @db.Timestamp(6)
  email               String       @unique(map: "index_users_on_email") @db.VarChar
  resetPasswordToken  String?      @unique(map: "index_users_on_reset_password_token") @map("reset_password_token") @db.VarChar
  resetPasswordSentAt DateTime?    @map("reset_password_sent_at") @db.Timestamp(6)
  confirmationToken   String?      @unique(map: "index_users_on_confirmation_token") @map("confirmation_token") @db.VarChar
  confirmedAt         DateTime?    @map("confirmed_at") @db.Timestamp(6)
  confirmationSentAt  DateTime?    @map("confirmation_sent_at") @db.Timestamp(6)
  passwordDigest      String       @map("password_digest") @db.VarChar
  username            String?      @unique(map: "index_users_on_username") @db.VarChar
  attendances         Attendance[]
  blogPosts           BlogPost[]
  comments            Comment[]
  favorites           Favorite[]
  likes               Like[]
  ratings             Rating[]
  reviews             Review[]
  showPhotos          ShowPhoto[]

  @@map("users")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model UserRole {
  userId String? @map("user_id") @db.Uuid
  roleId String? @map("role_id") @db.Uuid

  @@index([userId, roleId], map: "index_users_roles_on_user_id_and_role_id")
  @@map("users_roles")
  @@ignore
}

model Venue {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?  @db.VarChar
  slug        String   @db.VarChar
  street      String?  @db.VarChar
  city        String?  @db.VarChar
  state       String?  @db.VarChar
  country     String?  @db.VarChar
  postalCode  String?  @map("postal_code") @db.VarChar
  latitude    Float?
  longitude   Float?
  phone       String?  @db.VarChar
  website     String?  @db.VarChar
  legacyId    Int?     @map("legacy_id")
  createdAt   DateTime @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @map("updated_at") @db.Timestamp(6)
  timesPlayed Int      @default(0) @map("times_played")
  shows       Show[]

  @@index([slug], map: "index_venues_on_slug")
  @@map("venues")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Youtube {
  date DateTime? @db.Date
  url  String?

  @@map("youtubes")
  @@ignore
}
